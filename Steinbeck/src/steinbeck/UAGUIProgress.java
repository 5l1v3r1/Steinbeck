/*
 * UAGUIProgress.java
 *
 * Created on 13 Mayýs 2005 Cuma, 20:53
 */

package steinbeck;
import javax.swing.*;
import javax.swing.table.*;
import java.util.*;
/**
 *
 * @author  Administrator
 */
public class UAGUIProgress extends javax.swing.JFrame {
    
    // contains all the real audits
    private UAAuditHandler auditHandler;
    
    // a vector of all added progress bars, for easy updates
    private Vector progressBars;
    
    // a vector of all IPs
    private Vector IPPorts;
    
    // a vector of keys to differentiate all running scripts
    private Vector keys;
    
    // a thread that checks the updates of progresses
    private UAGUIProgressChecker progressChecker;
    
    /** Creates new form UAGUIProgress */
    public UAGUIProgress(UAAuditHandler auditHandler) {        
        initComponents();
        this.auditHandler = auditHandler;
    }
    
    public int getProgress(String key){
        return auditHandler.getProgress(key);
    }
    
    public void showDone(){
        JOptionPane.showMessageDialog(this, "Sessions are done.", "Information" ,JOptionPane.INFORMATION_MESSAGE);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Sessions Progress");
        jPanel1.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 10, 10));

        jButton1.setFont(new java.awt.Font("MS Sans Serif", 0, 12));
        jButton1.setText("Stop & Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.add(jButton1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(84, 84));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel3.setPreferredSize(new java.awt.Dimension(40, 10));
        jPanel2.add(jPanel3, java.awt.BorderLayout.WEST);

        jPanel4.setPreferredSize(new java.awt.Dimension(40, 10));
        jPanel2.add(jPanel4, java.awt.BorderLayout.EAST);

        jPanel5.setPreferredSize(new java.awt.Dimension(10, 40));
        jPanel2.add(jPanel5, java.awt.BorderLayout.NORTH);

        jPanel6.setPreferredSize(new java.awt.Dimension(10, 40));
        jPanel2.add(jPanel6, java.awt.BorderLayout.SOUTH);

        jPanel7.setLayout(new java.awt.GridLayout(0, 1, 5, 5));

        jPanel7.setPreferredSize(new java.awt.Dimension(100, 100));
        jPanel2.add(jPanel7, java.awt.BorderLayout.CENTER);

        jScrollPane1.setViewportView(jPanel2);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-459)/2, (screenSize.height-346)/2, 459, 346);
    }//GEN-END:initComponents

    // stops all audits
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try{
            auditHandler.stopAllAudits();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error ocurred when stopping session(s): Stopping Anyways!" + e.getMessage(), "An Error Ocurred" ,JOptionPane.ERROR_MESSAGE);
        }
        
        // stops the progress checker thread 
        if((progressChecker != null) && progressChecker.isAlive())
            progressChecker.stop(); // this only nullifies the thread object, does nothing more, nothing less :o
        
        UAGUIEntrance.gui.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UAGUIProgress aGUI = new UAGUIProgress();
                
                aGUI.addProgressBar("192.168.4.5");
                aGUI.addProgressBar("192.168.4.6");
                aGUI.addProgressBar("192.168.4.6");
                aGUI.addProgressBar("192.168.4.6");
                aGUI.addProgressBar("192.168.4.6");
                
                aGUI.setVisible(true);
            }
        });
    }
    */
    
    // starts the progress bar thing
    protected void start(){
        
        // a vector of all added progress bars 
        progressBars = new Vector();
        
        // a vector of all added IPs
        IPPorts = new Vector();
        
        keys = new Vector();
        
        int rowCount = UAGUIEntrance.gui.getRowCount();
        for(int rowIndex = 0; rowIndex < rowCount; rowIndex++){
            Vector anAudit = UAGUIEntrance.gui.getRow(rowIndex);
            // IP
            String IP = (String)anAudit.elementAt(0);
            // Port
            String port = (String)anAudit.elementAt(1);
            // username
            String username = (String)anAudit.elementAt(2);
            // remotePath
            String remotePath = (String)anAudit.elementAt(5);
            // localPath
            String localPath = (String)anAudit.elementAt(6);

            // a key is {anIP+username+port+remotePath+localPath}
            keys.addElement(IP+username+port+remotePath+localPath);
            
            addProgressBar(IP + ":" + port);            
        }
        // spawns progress bar controller for updates
        progressChecker = new UAGUIProgressChecker(this);
        // this is a thread start
        progressChecker.start();
    }
    
    protected void addProgressBar(String IPPort){
        JLabel aLabel = new JLabel();
        
        aLabel.setText(IPPort);
        
        // add this IP and Port to the vector of IPPorts
        IPPorts.addElement(IPPort);
        
        // minimum 0 and maximum 100
        JProgressBar aProgressBar = new JProgressBar(0,100);
        
        // add this progress bar to the vector of progress bars
        progressBars.addElement(aProgressBar);
        
        JPanel aPanel = new JPanel();
        aPanel.add(aLabel);
        aPanel.add(aProgressBar);
        jPanel7.add(aPanel);        
    }
    
    protected Vector getProgressBars(){
        return progressBars;
    }
    
    protected Vector getIPPorts(){
        return IPPorts;
    }
    
    protected Vector getKeys(){
        return keys;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
